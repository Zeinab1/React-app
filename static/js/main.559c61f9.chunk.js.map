{"version":3,"sources":["Component/TodoItems/TodoItems.js","Component/AddItems/AddItems.js","App.js","serviceWorker.js","index.js"],"names":["TodoItems","props","items","deleteItem","ListItems","length","map","item","react_default","a","createElement","key","id","className","name","age","onClick","AddItems","state","handleChange","e","_this","setState","Object","defineProperty","target","value","handleSubmit","preventDefault","addItem","onSubmit","this","type","placeholder","onChange","Component","App","filter","Math","random","push","Component_TodoItems_TodoItems","Component_AddItems_AddItems","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAmCeA,SA/BC,SAACC,GAAS,IACfC,EAAmBD,EAAnBC,MAAMC,EAAaF,EAAbE,WAEPC,EADOF,EAAMG,OAEbH,EAAMI,IAAI,SAAAC,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKJ,EAAKK,IACXJ,EAAAC,EAAAC,cAAA,QAAMG,UAAU,QAAQN,EAAKO,MAC7BN,EAAAC,EAAAC,cAAA,QAAMG,UAAU,OAAON,EAAKQ,KAC5BP,EAAAC,EAAAC,cAAA,QAAMG,UAAU,cAAcG,QAAS,kBAAMb,EAAWI,EAAKK,MAA7D,WAMJJ,EAAAC,EAAAC,cAAA,sCAER,OACIF,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACXL,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,QAAMG,UAAU,cAAhB,QACAL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,aAAhB,OACAL,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAhB,WAGJT,YCWGa,6MApCXC,MAAM,CACFJ,KAAK,GACLC,IAAI,MAERI,aAAc,SAACC,GACXC,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKH,EAAEK,OAAOb,GAAMQ,EAAEK,OAAOC,WAGjCC,aAAc,SAACP,GAEX,GADAA,EAAEQ,iBACyB,KAAxBR,EAAEK,OAAOX,KAAKY,MAEb,OAAO,EAEPL,EAAKpB,MAAM4B,QAAQR,EAAKH,OACxBG,EAAKC,SAAS,CACVR,KAAK,GACLC,IAAI,8EAMZ,OACIP,EAAAC,EAAAC,cAAA,WACGF,EAAAC,EAAAC,cAAA,QAAMoB,SAAUC,KAAKJ,cACjBnB,EAAAC,EAAAC,cAAA,SAAOsB,KAAK,OAAOpB,GAAG,OAAOqB,YAAY,qBAAqBC,SAAUH,KAAKZ,aAAcO,MAAOK,KAAKb,MAAMJ,OAC7GN,EAAAC,EAAAC,cAAA,SAAOsB,KAAK,SAASpB,GAAG,MAAMqB,YAAY,oBAAoBC,SAAUH,KAAKZ,aAAcO,MAAOK,KAAKb,MAAMH,MAC7GP,EAAAC,EAAAC,cAAA,SAAOG,UAAU,SAASmB,KAAK,SAASN,MAAM,iBA9B1CS,aCoCRC,6MAhCblB,MAAQ,CACNhB,MAAM,CACJ,CAACU,GAAG,EAAEE,KAAK,QAAQC,IAAI,IACvB,CAACH,GAAG,EAAEE,KAAK,QAAQC,IAAI,IACvB,CAACH,GAAG,EAAEE,KAAK,QAAQC,IAAI,QAI3BZ,WAAW,SAACS,GACT,IAAIV,EAAQmB,EAAKH,MAAMhB,MAAMmC,OAAO,SAAA9B,GAClC,OAAOA,EAAKK,KAAOA,IAErBS,EAAKC,SAAS,CAACpB,aAGlB2B,QAAU,SAACtB,GACRA,EAAKK,GAAG0B,KAAKC,SACd,IAAMrC,EAAQmB,EAAKH,MAAMhB,MACzBA,EAAMsC,KAAKjC,GACXc,EAAKC,SAAS,CAACpB,mFAGf,OACEM,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACdL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,eAAd,aACCL,EAAAC,EAAAC,cAAC+B,EAAD,CAAWvC,MAAS6B,KAAKb,MAAMhB,MAAOC,WAAY4B,KAAK5B,aACvDK,EAAAC,EAAAC,cAACgC,EAAD,CAAUb,QAASE,KAAKF,kBA3BdM,aCMEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.559c61f9.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst TodoItems=(props) =>{\r\n    const {items,deleteItem}= props;\r\n    let length = items.length;\r\n    const ListItems = length ? \r\n        ( items.map(item => {\r\n        return(\r\n            <div key={item.id}>\r\n                <span className=\"name\">{item.name}</span>\r\n                <span className=\"age\">{item.age}</span>\r\n                <span className=\"action icon\" onClick={() => deleteItem(item.id)}>&times;</span>\r\n            </div>\r\n              )\r\n          })\r\n\r\n        ):(\r\n            <p>There is no items to show</p>\r\n        )\r\n    return(\r\n        <div className=\"ListItems\">\r\n            <div>\r\n                <span className=\"name title\">Name</span>\r\n                <span className=\"age title\">Age</span>\r\n                <span className=\"action title\">Action</span>\r\n\r\n            </div>\r\n           {ListItems}\r\n        </div>\r\n    )\r\n\r\n\r\n}\r\nexport default TodoItems;","import React,{Component} from 'react';\r\n\r\n\r\nclass AddItems extends Component{\r\n    state={\r\n        name:'',\r\n        age:''\r\n    }\r\n    handleChange =(e)=>{\r\n        this.setState({\r\n            [e.target.id] : e.target.value\r\n        })\r\n    }\r\n    handleSubmit =(e)=>{\r\n        e.preventDefault();\r\n        if(e.target.name.value === '')\r\n        {\r\n            return false;\r\n        } else{\r\n            this.props.addItem(this.state);\r\n            this.setState({\r\n                name:'',\r\n                age:''\r\n            })\r\n        }           \r\n    }\r\n     \r\n    render(){\r\n        return(\r\n            <div>\r\n               <form onSubmit={this.handleSubmit}>\r\n                   <input type=\"text\" id=\"name\" placeholder=\"Type your name ...\" onChange={this.handleChange} value={this.state.name} />\r\n                   <input type=\"number\" id=\"age\" placeholder=\"Type your age ...\" onChange={this.handleChange} value={this.state.age} />\r\n                   <input className=\"submit\" type=\"submit\" value=\"Add\"/>\r\n\r\n               </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default AddItems;","import React,{Component} from 'react';\nimport './App.css';\nimport TodoItems from './Component/TodoItems/TodoItems';\nimport AddItems from './Component/AddItems/AddItems';\n\n\nclass App extends Component{\n  state = {\n    items:[\n      {id:1,name:'Ahmed',age:23},\n      {id:2,name:'Tarek',age:43},\n      {id:3,name:'Gamal',age:23}\n\n    ]\n  }\n  deleteItem=(id)=>{\n     let items = this.state.items.filter(item => {\n       return item.id !== id;\n     })\n     this.setState({items});\n  }\n\n  addItem = (item)=>{\n     item.id=Math.random();\n    const items = this.state.items;\n    items.push(item);\n    this.setState({items});\n  }\n  render(){\n    return(\n      <div className=\"App container \">\n       <h1 className=\"text-center\">To dolist</h1>\n        <TodoItems items = {this.state.items} deleteItem={this.deleteItem}/>\n        <AddItems addItem={this.addItem}/>\n      </div>\n    );\n  }\n\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}